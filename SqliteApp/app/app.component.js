"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Sqlite = require("nativescript-sqlite");
var AppComponent = (function () {
    function AppComponent() {
        var _this = this;
        console.log("database service constructors");
        (new Sqlite("words.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS people (id INTEGER PRIMARY KEY AUTOINCREMENT, firstName TEXT, lastName TEXT)").then(function (id) {
                _this._database = db;
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("CREATE DB ERROR", error);
        });
    }
    AppComponent.prototype.insert = function () {
        var _this = this;
        console.log("Acess Insert Ok");
        this._database.execSQL("INSERT INTO people (firstName, lastName) VALUES (?,?)", ["Randika", "Perera"]).then(function (id) {
            console.log("Insert Ok");
            _this.fetch();
        }, function (error) {
            console.log("INSERT ERROR: ", error);
        });
    };
    AppComponent.prototype.fetch = function () {
        var _this = this;
        console.log("Fetch data");
        this._database.all("SELECT * FROM people").then(function (rows) {
            _this.people = [];
            for (var row in rows) {
                console.log(rows[row]);
                _this.people.push({
                    "id": rows[row][0],
                    "firstName": rows[row][1],
                    "lastName": rows[row][2]
                });
            }
        }, function (error) {
            console.log("SELECTOR ERROR:", error);
        });
    };
    return AppComponent;
}());
AppComponent = __decorate([
    core_1.Component({
        selector: "my-app",
        templateUrl: 'app.component.html',
    }),
    __metadata("design:paramtypes", [])
], AppComponent);
exports.AppComponent = AppComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMEM7QUFDMUMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFRNUMsSUFBYSxZQUFZO0lBS3ZCO1FBQUEsaUJBWUM7UUFYQyxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDN0MsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7WUFDOUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyx5R0FBeUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7Z0JBQzNILEtBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQ3RCLENBQUMsRUFBRSxVQUFBLEtBQUs7Z0JBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMzQyxDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDTixPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFBO0lBRUosQ0FBQztJQUVNLDZCQUFNLEdBQWI7UUFBQSxpQkFRQztRQVBDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyx1REFBdUQsRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7WUFDNUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN6QixLQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZixDQUFDLEVBQUUsVUFBQSxLQUFLO1lBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDTSw0QkFBSyxHQUFaO1FBQUEsaUJBaUJDO1FBaEJDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxJQUFJO1lBQ2xELEtBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ2pCLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO29CQUNmLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNsQixXQUFXLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekIsVUFBVSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3pCLENBQUMsQ0FBQTtZQUNKLENBQUM7UUFFSCxDQUFDLEVBQUUsVUFBQSxLQUFLO1lBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztJQUVMLENBQUM7SUFHSCxtQkFBQztBQUFELENBQUMsQUFoREQsSUFnREM7QUFoRFksWUFBWTtJQUp4QixnQkFBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFFBQVE7UUFDbEIsV0FBVyxFQUFFLG9CQUFvQjtLQUNsQyxDQUFDOztHQUNXLFlBQVksQ0FnRHhCO0FBaERZLG9DQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbnZhciBTcWxpdGUgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXNxbGl0ZVwiKTtcblxuaW1wb3J0IHsgSHR0cCB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwibXktYXBwXCIsXG4gIHRlbXBsYXRlVXJsOiAnYXBwLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBfZGF0YWJhc2U6IGFueTtcbiAgcHVibGljIHBlb3BsZTogQXJyYXk8YW55PjtcblxuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zb2xlLmxvZyhcImRhdGFiYXNlIHNlcnZpY2UgY29uc3RydWN0b3JzXCIpO1xuICAgIChuZXcgU3FsaXRlKFwid29yZHMuZGJcIikpLnRoZW4oZGIgPT4ge1xuICAgICAgZGIuZXhlY1NRTChcIkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIHBlb3BsZSAoaWQgSU5URUdFUiBQUklNQVJZIEtFWSBBVVRPSU5DUkVNRU5ULCBmaXJzdE5hbWUgVEVYVCwgbGFzdE5hbWUgVEVYVClcIikudGhlbihpZCA9PiB7XG4gICAgICAgIHRoaXMuX2RhdGFiYXNlID0gZGI7XG4gICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ1JFQVRFIFRBQkxFIEVSUk9SXCIsIGVycm9yKTtcbiAgICAgIH0pXG4gICAgfSwgZXJyb3IgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJDUkVBVEUgREIgRVJST1JcIiwgZXJyb3IpO1xuICAgIH0pXG5cbiAgfVxuXG4gIHB1YmxpYyBpbnNlcnQoKSB7XG4gICAgY29uc29sZS5sb2coXCJBY2VzcyBJbnNlcnQgT2tcIik7XG4gICAgdGhpcy5fZGF0YWJhc2UuZXhlY1NRTChcIklOU0VSVCBJTlRPIHBlb3BsZSAoZmlyc3ROYW1lLCBsYXN0TmFtZSkgVkFMVUVTICg/LD8pXCIsIFtcIlJhbmRpa2FcIiwgXCJQZXJlcmFcIl0pLnRoZW4oaWQgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJJbnNlcnQgT2tcIik7XG4gICAgICB0aGlzLmZldGNoKCk7XG4gICAgfSwgZXJyb3IgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJJTlNFUlQgRVJST1I6IFwiLCBlcnJvcik7XG4gICAgfSlcbiAgfVxuICBwdWJsaWMgZmV0Y2goKSB7XG4gICAgY29uc29sZS5sb2coXCJGZXRjaCBkYXRhXCIpO1xuICAgIHRoaXMuX2RhdGFiYXNlLmFsbChcIlNFTEVDVCAqIEZST00gcGVvcGxlXCIpLnRoZW4ocm93cyA9PiB7XG4gICAgICB0aGlzLnBlb3BsZSA9IFtdO1xuICAgICAgZm9yIChsZXQgcm93IGluIHJvd3MpIHtcbiAgICAgICAgY29uc29sZS5sb2cocm93c1tyb3ddKTtcbiAgICAgICAgdGhpcy5wZW9wbGUucHVzaCh7XG4gICAgICAgICAgXCJpZFwiOiByb3dzW3Jvd11bMF0sXG4gICAgICAgICAgXCJmaXJzdE5hbWVcIjogcm93c1tyb3ddWzFdLFxuICAgICAgICAgIFwibGFzdE5hbWVcIjogcm93c1tyb3ddWzJdXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICB9LCBlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcIlNFTEVDVE9SIEVSUk9SOlwiLCBlcnJvcik7XG4gICAgfSk7XG5cbiAgfVxuXG5cbn1cbiJdfQ==